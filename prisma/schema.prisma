// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCategory {
  userId     String
  categoryId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId]) // Clave primaria compuesta
}

model Category {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userCategory UserCategory[]
}

model Educations {
  id        String           @id @default(cuid())
  name      String           @unique
  users     UserEducations[] // Relación con la tabla intermedia
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model UserEducations {
  userId       String
  professionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  profession   Educations @relation(fields: [professionId], references: [id], onDelete: Cascade)

  @@id([userId, professionId]) // Clave primaria compuesta
}

model Experience {
  id          String   @id @default(cuid())
  titulo      String   @unique
  place       String
  startDate   DateTime
  endDate     DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Rating {
  id        String   @id @default(cuid())
  score     Int      @default(0)
  comment   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model User {
  id           String           @id @default(cuid())
  email        String           @unique
  name         String
  lastName     String
  password     String
  contactPhone String
  roles        String[]
  categories   UserCategory[]
  educations   UserEducations[] // Relación con la tabla intermedia
  skills       String[]
  experience   Experience[]
  ratings      Rating[] // Relación 1:M (Un usuario puede recibir muchas calificaciones)
  avatar       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}
